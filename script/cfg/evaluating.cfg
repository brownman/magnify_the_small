#http://mywiki.wooledge.org/BashFAQ/048
#http://wiki.bash-hackers.org/commands/builtin/eval
#alias log_it=update_logger

every(){

    #assert_equal_str "aa"

    local cmd="$1"
    local num=${2:-5}
    random1 $num
    local res=$?
    local output=''
    if [ $res -eq 0 ];then

        notify-send1 "every $num" "$cmd"
        #output=$(eval "$cmd")
        detach "$cmd"
    else

        notify-send "skip" "$num"

    fi

sleep1 5
    return $res
    #echo "$output"
}


optional(){
#± |develop ✗| → ./genius.sh single config optional 'gedit /tmp/1.txt' 'edit something' error

   local  args=( "$@" )
#local    notify-send1=trace #avoid loop
#show_args
  #300ebug "optional" "$@"
    local cmd="$1"
    local text="${2:-$cmd}"
    local type=${3:-info}
    cmd="yad --notification --text=\"$text\" --command=\"$cmd\" --image=\"$type\" --timeout=16 "
    #update_commander
    detach "$cmd"  
}
limit1(){

    local delay=$1
shift
    local args=( "$@" )
    local action="${args[@]}"
            #notify-send1 'cfg' 'limit()'
            flite "take $delay seconds"
            sleep1 2
            local cmd="tasker $action"
            #(            commander  "$cmd" &)
            #disown
               detach "$cmd"  
              sleep2 "$action" "current" $delay 
}
is_command(){
    local str="$1"
    case "$str" in
        !*) return $SUCCESS;;  # Begins with a letter?
    *) return $FAILURE;;
esac
}
background(){
    local args=( "$@" )
    local action="${args[@]}"

            local cmd="tasker $action"
detach "$cmd" 
}



helper0(){
    local str="$1"
    local file=${2:-/tmp/logger}
    touch "$file"
    local str1=''

    case "$str" in
        '')
            trace 'empty line' 
            ;;
        'delete!')
            echo -n '' > $file
            ;;
        'peace!')

            tasker motivation higher_self
            ;;
        'speak!')

            xterm1 tasker free_speak
            ;;
        'dbs!')

            xterm1 tasker task_from activity
            ;;
        'break!')
            flite 'breaking'
            break
            ;;
        'exit!')
            flite 'exiting'
            exiting
            ;;
        'save!')
            update_file "$file_glossary" "$str"
            flite 'saving'
            ;;

        'practice!') 
            cmd1="tasker practice_regexp" 
            eval "$cmd1"
            ;;
        *) 
            speller "$str"
            local ans=$(first_char "$str" " ")
            if [ "$ans" = 'true' ];then
                 echo02 "$str" true 
            else
                  echo02 "$str" false 
            fi
            update_file $file "$str"
            ;;
    esac

}

commander(){
    local input="$1"

    local caller="${FUNCNAME[1]}"
    local lineno="${BASH_LINENO[0]}"
    local filename="${BASH_SOURCE[1]}"
    local callers="$0:$filename:$caller():$lineno"

    if [ "$COMMANDER1" = 'true' ];then
        input=$(gxmessage $GXMESSAGE0 -entrytext "$input" -title 'commander:' "run in external shell ? \n $callers" )

    fi
#echo "$input"
update_file "$file_logger" "$time1|$input" 
#"$file_logger"
    local res_str=$(  eval  "$input" )

    #local res_num=$?


    #assert_equal_str "$res_num" 2
    echo "$res_str"

    #return "$res_num"
    #$input
}

export -f commander 


export -f helper0 

export -f optional
export -f limit1

export -f is_command 
#export -f try 



export -f every 
export -f background 


