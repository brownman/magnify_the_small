#http://sql.learncodethehardway.org/book/ex0.html
#file_db=/tmp/test.db
#table1=memos
#file_db=$dir/test.db 


#


insert_row(){

    notify-send 'insert row' "$1 | $2"
    local name="$1"
    local table1="$name"
    local  file_db=$SQL_DIR/$name.db 

    local fields=$(echo "($2)" | sed 's/ /,/g')
    local values=$(echo "('$3')" | sed "s/|/','/g")
    #local fields1='(doing,should,sport)'
    #local values1="('a a','b','1')"
    #local cmd=$(echo "sqlite3 $file_db  \"insert into $table1 $fields values $fields\";")
    local cmd=$(echo "sqlite3 $file_db  \"insert into $table1 $fields values $values\";")

    local res=$(   eval "$cmd")
    trace "res: $res"
}

update_db_list(){
    local file=$DATA_DIR/txt/db.txt
    notify-send 'update_db_list'
    #local str=`sqlite3 -header -list ex1.db ".tables" | xargs echo | sed 's/ /|/g'`
    local str=$(sqlite3 -header -list $file_db ".tables" | tr -s ' ' '\n')
    echo "$str" > $file
    mantion_file $file
}


show_selected_table(){



    local name="$1"
    local values="$2"
    local gui=''
    if [ "$values" ];then

        gui=false
    else

        gui=true
    fi

    #local gui=true
    local table1="$name"
    local  file_db=$SQL_DIR/$name.db 
    notify-send 'show_selected_table:' ": $table1"
    #breakpoint


    local zen1="--width=640 --height=480 --list --title=$table1"
    local zen2=''
    local fields=''

    local header=`sqlite3 -header -list $file_db "select * from $table1;" | head -n 1`
    IFS='|' read -a columns <<< "$header"

    count=0
    for col in ${columns[@]}; do
        zen1="$zen1 --column=\"$col\" "

        if [ $count -eq 0 ];then
            trace 'skip id'

        else
            zen2="$zen2 --add-entry=\"$col\" "
            empty=''
            if [ "$fields" != '' ];then
                empty=' '
            fi
            fields="${fields}${empty}${col}"
        fi

        let 'count=count+1'
    done


    local tmp=$(echo "zenity $timeout1 --forms --title=$table1 --text=currently: "$zen2" ")
    if [ "$gui" = true ];then

        values=$(eval $tmp)
        #else

        #values="$date1|$func|$args"

    fi


    local tmp1=$(echo "$values" | sed 's/|//g' | sed 's/ //g')

    if [ "$tmp1" != '' ];then
        cmd="insert_row '$name' '$fields' '$values'"
        #COMMANDER=true
        commander "$cmd"
        #insert_row "$name" "$fields" "$values"
    fi

    local str1="'select * from $table1 order by id desc;'"
    local pipe1=" tr ','  ' ' " 
    local pipe2=" tr '\n' ' ' "
    local str_sql1="sqlite3 -csv $file_db $str1 | $pipe1 | $pipe2"
    local cmd_sql1=$(echo "$str_sql1")
    local res_sql1=$(eval "$cmd_sql1")
    local str_zen1="xargs zenity $zen1 $timeout1"
    if [ "$gui" = true ];then

        res=$(echo "$res_sql1" |   eval "$str_zen1")
    else
        random1 5
        result=$?
        if [ $result -eq 0 ];then
            notify-send1 'mantion' 'logger db'
            $(echo "$res_sql1" |   eval "$str_zen1")
        fi


    fi

    #notify-send1 "res: $res"
    local last=$(sqlite3 $file_db "select * from $table1 order by id desc" | head -1)


    echo "$last"

}
update_logger(){

    local func="${FUNCNAME[1]}"
    local args="$@"
    #local time="$date1"

    local str=""
    str="$date1|$func|$args"

    #echo  "${BASH_SOURCE[$i]}:${BASH_LINENO[$i-1]}:${FUNCNAME[$i]} " >> $file_error
    #gxmessage $GXMESSAGET  "$str" -title "LOGGER:"
    show_selected_table "logger" "$str" 

}

export -f update_logger 
export -f show_selected_table
export -f insert_row 
export -f update_db_list
