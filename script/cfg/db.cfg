#http://sql.learncodethehardway.org/book/ex0.html
#file_db=/tmp/test.db
#table1=memos
#file_db=$dir/test.db 


#
show_table(){
# output table contents
    OUTPUT=$(sqlite3 "$file_db" "select * from $table1")
        echo "$OUTPUT" | \
        zenity --text-info \
        --title "$TITLE" \
        --width=640 \
        --height=480
}

select_table(){

    local res=$(sqlite3 $file_db < $query)
        gxmessage $GXMESSAGET "$res"
        echo "$res"
}

report_file(){
    local file=$1
        is_valid $file
        res=$?
        if [ $res -eq 0 ];then
            notify-send 'create file' "$file"
                sqlite3 -echo $file < $query
        else
            notify-send 'file exist' "$file"
                fi
                return $res
}
create_db(){
    local file=$DB_DIR/notebook.db
        local query=$SQL_DIR/create_table.sql
        report_file $file $query
        echo "$?"
}
create_relations(){
    local query=$SQL_DIR/create_relations.sql
        local file=$DB_DIR/relations_tags_sentence.db
        report_file $file $query
        echo "$?"
}
update_table(){

    local query=$SQL_DIR/update_table.sql
        local file=$DB_DIR/relations_tags_sentence.db
        report_file $file $query

        echo "$?"
}



to_mysql(){
    sqlite3 mydb.sqlite3 '.dump' | grep -vE '^(BEGIN|COMMIT|CREATE|DELETE)|"sqlite_sequence"' | sed -r 's/"([^"]+)"/`\1`/' | tee mydb.sql | mysql -p mydb
}

store1(){
trace 'store bckup'
}
store2(){
    notify-send 'store:' ": $table1"


        local zen1="--list --title=$table1"
        local header=`sqlite3 -header -list $file_db "select * from $table1;" | head -n 1`
        IFS='|' read -a columns <<< "$header"
        for col in ${columns[@]}; do
            zen1="$zen1 --column=\"$col\" "
        done

                #trace "$command" #| tr '\n' ' ' | xargs zenity
                local str1="'select * from $table1 order by id desc;'"
                #echo "$str1"



        local pipe1=" tr ','  ' ' " 
        local pipe2=" tr '\n' ' ' "

        local str_sql1="sqlite3 -csv $file_db $str1 | $pipe1 | $pipe2"
        local cmd_sql1=`echo "$str_sql1"`
        local res_sql1=`eval "$cmd_sql1"`
        #assert_equal_str "$res_sql1" 'doing' 

        local str_zen1="xargs zenity $zen1 $timeout1"
        #local cmd_zen1=`echo "$str_zen1"`
        #assert_equal_str "$cmd_zen1" 'timeout' 




#echo "1  sdf1 sdf1  1" | xargs zenity $($zen) "$str_zen1"


#local cmd_tmp='echo "1  sdf1 sdf1  1" 
#echo "$res_sql1" | xargs zenity --list --title=notebook --column="id"  --column="doing"  --column="should"  --column="sport"  --timeout=20'

#res=$(echo "1  sdf1 sdf1  1" |  xargs zenity --list --title=notebook --column="id"  --column="doing"  --column="should"  --column="sport"  --timeout=20)


#res=$(echo "$res_sql1" |  xargs zenity --list --title=notebook --column="id"  --column="doing"  --column="should"  --column="sport"  --timeout=20)
res=$(echo "$res_sql1" |   eval "$str_zen1")
#--list --title=notebook --column="id"  --column="doing"  --column="should"  --column="sport"  --timeout=20)

#local cmd_tmp='echo "1  sdf1 sdf1  1" | xargs zenity --list --title=notebook --column="id"  --column="doing"  --column="should"  --column="sport"  --timeout=20'
#local cmd_tmp=$(echo "1  sdf1 sdf1  1" | xargs zenity "$str_zen1")
#zenity --list --title=notebook --column="id"  --column="doing"  --column="should"  --column="sport"  --timeout=20'
#local cmd_tmp='echo "$res_sql1" | xargs zenity --list --title=notebook --column="id"  --column="doing"  --column="should"  --column="sport"  --timeout=20'

        #local res=`echo "$res_sql1" | xargs "$cmd_zen1"`
#echo "1  1  1  1" | xargs "$str_zen1"
        #local res=``
#local ress=$( eval "$cmd_res")
        #local cmd_res=`'echo "1 1 1 1" | xargs "$cmd_zen1"'`
        #assert_equal_cmd "$cmd_tmp" 'abc' 
        #eval "$cmd_tmp"
        
        #assert_equal_str "$res" 
        #'timeout' 
        echo "res: $res"
}


from_firefox(){
    TITLE="Show Contents"

# query for table name
        TEXT=$(echo -e "Available Tables:\n\n$(sqlite3 "$@" ".table" | tr -s ' ' '\n')\n\nEnter table to view:")
        SELECTION=$(zenity --entry \
                --title "$TITLE" \
                --text "$TEXT")

# output table contents
        OUTPUT=$(sqlite3 "$@" "select * from "$SELECTION"")
        echo "$OUTPUT" | \
        zenity --text-info \
        --title "$TITLE" \
        --width=640 \
        --height=480

# search option
        zenity --question \
        --title $TITLE \
        --text "Do you want to search this output?" \
        --ok-label="Yes" \
        --cancel-label="No"

        if [ "$?" = "1" ]; then
            exit 0
                fi

                TERM=$(zenity --entry \
                        --title "$TITLE" \
                        --text "Enter search term:")
                echo -e "$OUTPUT" | grep -Ei "$TERM" | \
                zenity --text-info \
                --title "$TITLE" \
                --width=640 \
                --height=480

}

insert_row(){
    notify-send 'insert row'
        local line="$1"

        local doing=$( echo $line | awk -F '|' '{print $1}' )
        local should=$( echo $line | awk -F '|' '{print $2}' )
        local sport=$( echo $line | awk -F '|' '{print $3}' )

        #local time=$date1
        #notify-send "$date1"
#echo "im gonna run" sqlite3 tasks.db "insert into todo \
#(project,duedate,status,description) \
#values (\"$Proj\",$Due,\"$Stat\",\"$Descr\");"

#sqlite3 tasks.db "insert into todo (project,duedate,status,description) \
#values (\"$Proj\",$Due,\"$Stat\",\"$Descr\");"
#dir=$SQL_DIR


#local file_db=/tmp/test.db
#local table1=memos
#local task='new task1'
#local priority=5
#store
#sqlite3 $file_db "insert into $table1 (priority,task) \
#values ($priority,\"$task\");" 
       local cmd='sqlite3 $file_db "insert into $table1 (doing,should,sport) values (\"$doing\",\"$should\",$sport);"'
local res=$(   commander "$cmd")
echo "res: $res"
#store

#echo 'db1'
#local res=$(select_table)
#echo "res: $res"
}


##
export -f insert_row 
#export -f from_firefox 
export -f store2 

export -f create_db

export -f report_file 

export -f create_relations 

export -f select_table 

export -f update_table 
export -f show_table 
