#http://sql.learncodethehardway.org/book/ex0.html
#file_db=/tmp/test.db
#table1=memos
#file_db=$dir/test.db 


#


insert_row(){
    notify-send 'insert row' "$1 | $2"

        local table1="$1"

        local fields=$(echo "($2)" | sed 's/ /,/g')
        local values=$(echo "('$3')" | sed "s/|/','/g")
        local fields1='(doing,should,sport)'
        local values1="('a a','b','1')"
#assert_equal_str "$fields" "$fields1"
#assert_equal_str "$values" "$values1"

#assert_equal_str "$fields"
#assert_equal_str "$values"
        #local cmd=$(echo "sqlite3 $file_db  \"insert into $table1 $fields values $fields\";")
        local cmd=$(echo "sqlite3 $file_db  \"insert into $table1 $fields values $values\";")

        local res=$(   eval "$cmd")
        trace "res: $res"
}

update_db_list(){
local file=$DATA_DIR/txt/db.txt
notify-send 'update_db_list'
#local str=`sqlite3 -header -list ex1.db ".tables" | xargs echo | sed 's/ /|/g'`
local str=$(sqlite3 -header -list $file_db ".tables" | tr -s ' ' '\n')
echo "$str" > $file
mantion_file $file
}


show_selected_table(){
    
    notify-send 'show_selected_table:' ": $table1"
#breakpoint
        local table1="$1"
  

        local zen1="--width=640 --height=480 --list --title=$table1"
        local zen2=''
        local fields=''

        local header=`sqlite3 -header -list $file_db "select * from $table1;" | head -n 1`
        IFS='|' read -a columns <<< "$header"

        count=0
        for col in ${columns[@]}; do
            zen1="$zen1 --column=\"$col\" "

                if [ $count -eq 0 ];then
                    trace 'skip id'
             
                else
                    zen2="$zen2 --add-entry=\"$col\" "
                    empty=''
                   if [ "$fields" != '' ];then
                    empty=' '
                   fi
                        fields="${fields}${empty}${col}"
                fi

                        let 'count=count+1'
                        done


                        local tmp=$(echo "zenity $timeout1 --forms --title=$table1 --text=currently: "$zen2" ")
                        local values=$(eval $tmp)
                        local tmp1=$(echo "$values" | sed 's/|//g' | sed 's/ //g')

                       if [ "$tmp1" != '' ];then
                        insert_row "$table1" "$fields" "$values"
                       fi

                        local str1="'select * from $table1 order by id desc;'"
                        local pipe1=" tr ','  ' ' " 
                        local pipe2=" tr '\n' ' ' "
                        local str_sql1="sqlite3 -csv $file_db $str1 | $pipe1 | $pipe2"
                        local cmd_sql1=$(echo "$str_sql1")
                        local res_sql1=$(eval "$cmd_sql1")
                        local str_zen1="xargs zenity $zen1 $timeout1"
                        res=$(echo "$res_sql1" |   eval "$str_zen1")
                        trace "res: $res"
local last=$(sqlite3 $file_db "select * from $table1 order by id desc" | head -1)

#assert_equal_str "$last"
#local cmd='$tasks_sh string_to_buttons "$last" "|"'

#assert_equal_str "$cmd" "shirli"
#assert_equal_cmd "$cmd" "shirli"


#echo "$last"

#local cmd1="$tasks_sh string_to_buttons '$res' '-'"


#assert_equal_str "$cmd"
#eval "$cmd1"
echo "$last"

}

show_table1(){
# output table contents
    OUTPUT=$(sqlite3 "$file_db" "select * from $table1")
        echo "$OUTPUT" | \
        zenity --text-info \
        --title "$TITLE" \
        --width=640 \
        --height=480
}

select_table(){

    local res=$(sqlite3 $file_db < $query)
        gxmessage $GXMESSAGET "$res"
        echo "$res"
}

report_file(){
    local file=$1
        is_valid $file
        res=$?
        if [ $res -eq 0 ];then
            notify-send 'create file' "$file"
                sqlite3 -echo $file < $query
        else
            notify-send 'file exist' "$file"
                fi
                return $res
}
create_db(){
    local file=$DB_DIR/notebook.db
        local query=$SQL_DIR/create_table.sql
        report_file $file $query
        echo "$?"
}
create_relations(){
    local query=$SQL_DIR/create_relations.sql
        local file=$DB_DIR/relations_tags_sentence.db
        report_file $file $query
        echo "$?"
}
update_table(){

    local query=$SQL_DIR/update_table.sql
        local file=$DB_DIR/relations_tags_sentence.db
        report_file $file $query

        echo "$?"
}



to_mysql(){
    sqlite3 mydb.sqlite3 '.dump' | grep -vE '^(BEGIN|COMMIT|CREATE|DELETE)|"sqlite_sequence"' | sed -r 's/"([^"]+)"/`\1`/' | tee mydb.sql | mysql -p mydb
}

store1(){
    trace 'store bckup'
}
from_firefox(){
    TITLE="Show Contents"

# query for table name
        TEXT=$(echo -e "Available Tables:\n\n$(sqlite3 "$@" ".table" | tr -s ' ' '\n')\n\nEnter table to view:")
        SELECTION=$(zenity --entry \
                --title "$TITLE" \
                --text "$TEXT")

# output table contents
        OUTPUT=$(sqlite3 "$@" "select * from "$SELECTION"")
        echo "$OUTPUT" | \
        zenity --text-info \
        --title "$TITLE" \
        --width=640 \
        --height=480

# search option
        zenity --question \
        --title $TITLE \
        --text "Do you want to search this output?" \
        --ok-label="Yes" \
        --cancel-label="No"

        if [ "$?" = "1" ]; then
            exit 0
                fi

                TERM=$(zenity --entry \
                        --title "$TITLE" \
                        --text "Enter search term:")
                echo -e "$OUTPUT" | grep -Ei "$TERM" | \
                zenity --text-info \
                --title "$TITLE" \
                --width=640 \
                --height=480

}

#
###

##export -f from_firefox 
##export -f store2 
#
#export -f create_db
#
#export -f report_file 
#
#export -f create_relations 
#
#export -f select_table 
#
#export -f update_table 
#export -f show_table 

#export -f update_selected_table
export -f show_selected_table
export -f insert_row 
export -f update_db_list
