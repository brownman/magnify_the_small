# Log Call Stack
#http://www.fvue.nl/wiki/Bash:_Error_handling
#http://www.linuxcommand.org/lc3_lts0080.php
#http://wiki.bash-hackers.org/commands/builtin/caller
#http://www.skybert.net/unix/bash/serious-programming-in-bash/
# about file:
# test the first test listen on blank.yaml:testing
#http://www.thegeekstuff.com/2010/10/expect-examples/#more-6218
#args=$(tasker fetch "$args0")
#http://tldp.org/LDP/abs/html/comparison-ops.html
#http://stackoverflow.com/questions/3265803/bash-string-equality
#cry
show_env(){
    #notify_send1 "MUTE_CHILD: $MUTE_CHILD"
local secret=$(secret 2)
notify_send1 "SHOW_ENV" "$secret"
}


debug(){
        trace "$@"
}

exiting()
{
    trace "exiting() got: 0:$@"
    notify_send1 "Exiting" "$file_locker" 
    #breakpoint false
    #"caller: ${FUNCNAME[2]}"

    #notify_send 'Exiting'
    #if [ "$VERBOSE" = true ];then
    #Backtrace1
    #trace 'backtrace'
    #fi

    flite 'exiting'
    #trace 'exiting'
    #die
    #cmd="rm $file_locker"
    #COMMANDER=true
    #commander "$cmd"
    exit 1 
}


#to_continue(){
#
#    $( messageYN1 "test failed ?" "y/n" )
#    #tracex 'is 1?' "$result"
#    result=$?
#    if [[ $result -eq 0 ]];then
#
#        exiting
#    else
#        notify_send 'continue'
#    fi
#
#
#
#}
#


#show_caller(){
#
#    #gxmessage $GXMESSAGET "caller: ${FUNCNAME[2]} ${FUNCNAME[3]}  ${FUNCNAME[4]}"
#
#  }


#error_handler2(){
#trace 'problem'
#}
#error_handler3(){
#flite 'error handler'
#    local msg='found error'
#    trace "$msg"
#    Backtrace1
#    exit 1
#}
#



#local cmd="clean_file $file_logger"
#every "$cmd" 150
    #update_file $file_logger "_: $1 : $2 :$3" 
     #>> $file_logger
    #&1> /dev/null
#error_handler(){
#die
#}
#
#
#local cmd="clean_file $file_logger"
#every "$cmd"  150
    #update_file $file_logger "_${1}${2}" 
     #>> $file_logger
    #&1> /dev/null
trace(){
local str1=${1:-''}
local str2=${2:-''}

if [ "$VERBOSE" = false ];then
echo "__$str1|$str2" 2>&1 1>/dev/null
else
echo "__$str1|$str2" 
fi
#> /dev/null
}
tracen(){
local str1=${1:-''}
local str2=${2:-''}

if [ "$VERBOSE" = false ];then
echo -n "__$str1|$str2" 2>&1 1>/dev/null
else
echo -n "__$str1|$str2"
fi
#> /dev/null

}

export -f trace
export -f tracen 
export -f exiting
#export -f to_continue 
export -f debug
#export -f got
#export -f command_not_found_handler
export -f show_env


#trap 'error ${LINENO} ${$?}' ERR
#trap SIGINT SIGTERM
# ! ! ! TRAP ERR ! ! !

#trap "eval exiting ${LINENO} ${$?}" SIGINT SIGTERM
#http://en.wikipedia.org/wiki/Unix_signal

