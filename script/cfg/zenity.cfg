notify-send3(){
xcowsay "$1"
}
sleep2(){


    local text="$1"
    local title="$2"
    local sec="$3"

    local min=$((sec/60))

    local time2=$(get_time "$sec")


    text="$date1-$time2:: $text :: ${min}m"
    title=" $title "

    local num=0

    ( 
    trace "sleep ${sec}s"
    for (( c=1; c<=$sec; c++ ))
    do
        #tracen  "$c "
        num=$((c*100/sec))
        #assert_equal_str "$num"
        echo "$num" ;            sleep 1s
    done
    ) | yad --progress --percentage=10 \
        --progress-text="$text" \
        --title="$title" \
        --sticky --on-top \
        --auto-close

}


ex1(){

action=$(yad --width 300 --entry --title "System Logout" \
    --image=gnome-shutdown \
    --button="Switch User:2" \
    --button="gtk-ok:0" --button="gtk-close:1" \
    --text "Choose action:" \
    --entry-text \
    "Power Off" "Reboot" "Suspend" "Logout")
ret=$?
assert_equal_str "$res | $action"
}

ex2(){
LOGFILE=${1:-/var/log/messages}

PARSER='{font=""; color="#FFFFFF"}; \
/kernel/ {font="italic"}; \
/warn/ {color="#FFF4B8"}; \
/error/ {color="#FFD0D8"}; \
OFS="\n" {print $1 " " $2, $3, $4, substr($5,0,index($5,":")-1), \
substr($0,index($0,$6)), font, color; fflush()}'

tail -f $LOGFILE | awk "$PARSER" | \
yad --title="Log viewer" --window-icon=logviewer \
    --button=gtk-close --geometry 600x350 \
    --list --text="Content of $LOGFILE" \
    --column Date --column Time --column Host \
    --column Tag --column Message:TIP \
    --column @font@ --column @back@

exit $?
}
#export number_of_files=$(find folder_to_backup -type f | wc -l) && ( find folder_to_backup -print0 -type f -exec sh -c "7z a -t7z /path/to/Backup.7z {} -mx9 -bd | grep Compressing" \; | awk -W interactive -v x="$number_of_lines" '{printf "%d\n", (NR*100/x)}' ) | zenity --progress --percentage=0 --auto-close

progress_bar0(){
local x=$1
    #(youtube-dl -c -t "$riper"  --no-part --console-title --extract-audio --audio-format mp3 --audio-quality 192k | gawk 'BEGIN { RS="\r" } /%/ { print gensub(/.*(\<.?.?.\..\>)%.*/, "\\1", ""); fflush(); }' ) |
    echo $x | zenity --progress --percentage=0 --percentage=0 --auto-close --auto-kill
}
notify-send(){
trace "$@"
}

notify-send1(){



trace "notify-send called from: ${FUNCNAME[1]}"
trace "notify-send called from: ${FUNCNAME[2]}"
local cmd=/usr/bin/notify-send
#eval $cmd "$@"

$cmd "$1" "$2"


#run_silently "breakpoint false"
}



messageYN1() {
notify-send $0
    trace "messageYN got: 1: $1 2: $2 3:$3"





    local str=${1:-'continue ?'}   # Defaults to /tmp dir.

    local title=${2:-'y/n question'}   # Defaults to /tmp dir.

    local iconic="$3"
    local delay="$4"

    local result=0

  local buttons="back:0,Next!:1" #,screenshot:2"

  if [ "$delay" = '' ];then

           $( gxmessage -buttons "$buttons" -title "$title" "$str"  $GXMESSAGET "$iconic"  )
  else
           $( gxmessage -buttons "$buttons" -title "$title" "$str"  "$iconic" -timeout $delay )
  fi


        result=$?
#        if [ $result -eq 1 ];then
#            notify-send1 'screenshot'
#        fi
#notify-send 'messageYN1' "$result"
    return $result
}


#http://code.google.com/p/linuxsleuthing//browse/nautilus-scripts/

zenity2(){


local name="$2"
local type="$1"
local file=$(get_filename1 $type $name )
local res=$(zenity1 $file)
echo "$res"
}
zenity1(){
 #find . -name '*.txt' 
 local file="$1"
 local title=${2:-"title"}
 local text=${3:-"text"}
 #${3:-'text0'}
 #local editable="$4"
 notify-send "$editable"
 #local res=$(
 res=$(cat $file | zenity --list --title "$file" --text "$text" --column "Files" --editable --timeout $TIMEOUT_ZENITY)


 
local notify1=`cat $file | head -1`
notify-send "$notify1"

 echo "$res"
 
}

show_vars(){
    trace 'show vars'
    trace "DEBUG: $DEBUG"
    trace "VERBOSE: $VERBOSE"
}
progress_bar(){
    local goal="$1"
local goal1="$1"
local delay=20 #"$2"
    (


echo "10" ; sleep $delay

echo "# $goal" ; sleep 1
echo "20" ; sleep $delay
#echo "# increase motivation" ; sleep 1

echo "# $goal" ; sleep 1
echo "50" ; sleep $delay
#echo "#learn new words" ; sleep 1

echo "# $goal" ; sleep 1
echo "75" ; sleep $delay

echo "# $goal" ; sleep 1
#echo "# finish cycle" ; sleep 1
echo "100" ; sleep $delay
) |
zenity --timeout 120 --progress         \
  --title="time-frame:" \
  --text="restart goal" \
  --percentage=0

if [ "$?" = -1 ] ; then
        zenity --error \
          --text="Update canceled."
fi
}

export -f ex1 
export -f progress_bar

export -f notify-send 
export -f notify-send 
export -f notify-send3 

export -f show_vars 

export -f zenity1 
export -f zenity2        

export -f messageYN1

        export -f sleep2
##
