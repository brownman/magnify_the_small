#http://www.thegeekstuff.com/2009/03/15-practical-unix-grep-command-examples/
#http://dsl.org/cookbook/cookbook_5.html#SEC63 #pid
#http://www.thegeekstuff.com/2010/07/bash-string-manipulation/ 
#fs:
#find . -type f -print0 | xargs -0 du -h | sort -hr | head -20



xterm(){
    tracex 'xterm command not allowed'
}

#
#echo0(){
#    if [ $DEBUG = false ];then
#        $PLUGINS_DIR/translation.sh sentence "$1" true  
#    else
#        trace 'echo0: silent'
#    fi
#}

echo01(){
    local str="$1"
    if [ "$str" ];then
      eval "speller '$str'"

        local res=$(last_char "$str" ' ')

        if [ "$DEBUG" = false ];then
            if [ "$res" = false ];then
                $PLUGINS_DIR/translation.sh sentence "$str" false false 
            else
                $PLUGINS_DIR/translation.sh sentence "$str" false true
            fi
        else
            trace 'echo0: silent'
            #mantion 'echo01-debug is true -> silent'
        fi
        $PLUGINS_DIR/translation.sh sentence "$str"


    fi


}



suspension(){
    dbus-send --system --print-reply     --dest="org.freedesktop.UPower"     /org/freedesktop/UPower     org.freedesktop.UPower.Suspend
}






sleep1()
{
    local sec="$1"
    if [ "$sec" = '' ];then
        notify-send "sleep1" "error: no param: Xs"
        breakpoint
        sec=30
    fi


    trace "sleep ${sec}s"

    for (( c=1; c<=$sec; c++ ))
    do
        #tracen  "$c "
        #echo ''
        sleep 1s
    done

    #sleep ${sec}s


}

red() {
    echo "${LRED}$1"
    tput sgr0
}




speller(){
    local str="$1"
    local res=`echo "$str" |  aspell -a | grep  ','`
    if [  "$res" = '' ];then
        trace "$str"
    else
        trace "$res"
        notify-send1 "$res"

        #echo "error"
        #breakpoint
        flite 'spelling error'
        trace "$str"
    fi

    #assert_equal_str "speller: $str" 
}

help1(){
    trace "options: "
    trace "$1"
}


flite(){
    debug "flite() got: 1:$1 2:$2 3:$3"
    #local must="$2"
    #sleep1 1

    local desc="$1"

    local desc2="$2"
    #[  "$must" = 'true' ] ||
        if  [ "$SILENCE" = 'false' ];then
            local cmd=/usr/bin/flite

            notify-send1 "say:" "$desc : $desc2"
            ( echo "$desc" | $cmd &)
            #gxmessage "flite: $desc" $GXMESSAGET
        else
            debug 'flite is muted'
            #notify-send 'silence' "$1   :   $2"
        fi
    }

     #

    eacher(){
        trace "eacher() got: 1: $1     2: $2"

        local command="$1"
        local question="$2"
        local waiting="$3"

        local title="$4"
        local result=0
        $(messageYN1 "$question" "$title")
        answer=$?
        #yellow "$answer"
        if [[ $answer -eq 1 ]];then
            #echo 'exec command'
            eval "$command" 
            if [ "$waiting" != '' ];then
                sleep1 "$waiting"
            fi
            result=1
        fi
        return $result
    }

    sleep3(){

        ffmpeg -i %f -vn -ar 44100 -ac 2 -ab 128 -f mp3 %f.mp3 | yad --progress --percentage=40 --progress-text="Please wait ... file being processed" --title="Audio Extraction" --auto-close --auto-kill

    }
    get_time(){
        local limit="$1"
        local date2=$(date --date="$limit seconds" +%H:%M)
        echo "$date2"
    }

    reload_cfg(){
    
. $DATA_DIR/cfg/vars.cfg
    }


    export -f reload_cfg 
    export -f get_time 
    #export -f echo0 
    export -f echo01 
    export -f speller 
    export -f flite 
    export -f help1
    export -f eacher
    export -f sleep1


  
#   line_strip(){
#        local line="$1"
#        local file=$2
#
#        local num=$(echo "$line" | awk -F '|' '{print $1}')
#        local res=$(echo "$line" | awk -F '|' '{print $2}')
#
#
#
#        for (( c=1; c<=$num; c++ ))
#        do
#            echo "$res" >> $file
#        done
#
#        #echo "$num"
#
#    }


