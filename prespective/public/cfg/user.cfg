#configuration file
#user.cfg

######################env - important ##########################

#export DEBUG=true

export TIMEOUT_NS='-t 20000'
export REPORT=false
export DEBUG=false
#export DEBUG=true
export VERBOSE=true
export GXMESSAGET=' -ontop -sticky -timeout 10'
export SHOW_BUTTONS=true
################################  language stuff####################
arr1=( IT AR HI RU )
#arr2=( )
export itR=1
export tlR=1
export enR=1
export ruR=1
export arR=2
export hiR=3
#dir_essay=~/tmp/timer2/essays
##################################  global vars##################

export date1="$(date +%H:%M)"
export PLAYING_ON=false
export LANG_DEFAULT=ru
#export LANG_ESSAY=ru
export color_arr1=( blue green red black )
export GUI='true'
#audio
export SILENT_FETCH=false
export SILENT=false
export SILENCE=false
export TRANSLATE=true
#timing
export TIMEOUT1=20
export TIMEOUT_LET_ME_SLEEP=60
#export LESSON=14

export SLEEP=30
#export GXMESSAGE1=echo  -ontop -sticky -timeout 10 -buttons \'last task is: "$last_task"\' "message1"

#GXMESSAGET='-wrap -ontop -sticky -timeout 60'
#GXMESSAGE1="-nofocus -wrap -ontop -sticky -timeout 20"
#GXMESSAGE0="-nofocus -wrap -ontop -sticky"
#export ICONIC='' 
export ICONIC='-iconic'
export SLEEPS=15
export SUSPEND=true

export INPUT_THANKS=true
export itR=1
export tlR=1
export enR=1
export ruR=1
export arR=2
export hiR=3

xterm(){
trace 'xterm command not allowed'
exiting
}
echo0(){
 if [ $DEBUG = false ];then
    xterm1 $PLUGINS_DIR/translation.sh sentence "$1" true  
 else
    trace 'echo0: silent'
 fi
}
echo01(){

 if [ $DEBUG = false ];then
    xterm1 $PLUGINS_DIR/translation.sh sentence "$1" false 
 else
    trace 'echo0: silent'
 fi


}
debug(){
trace "$2"
}


suspension(){
    dbus-send --system --print-reply     --dest="org.freedesktop.UPower"     /org/freedesktop/UPower     org.freedesktop.UPower.Suspend
}

is_valid(){
    echo -n  "is_valid() got:"
    trace "1:$1 2:$2"

    if [ "$1" = '' ];then
        trace 'no arg given'
        error_handler
    fi

    local file=$1
    local result=0
    debug yellow 'check existance'
    if [ $file ];then
        debug green 'file exist'
        if  [ -s $file ];then
            debug green 'file has content'
            actualsize=$(du -b "$file" | cut -f 1)
            echo -n 'size: '
            debug trace $actualsize

            if [ $actualsize -eq 0 ];then
                debug red  'file is corrupted'
                #let "result = 1"
            else
                debug green 'file seems ok'
                let "result = 1"
            fi
        else
            debug red 'file is empty'
        fi
    else
        debug red 'file not exist'
    fi
    return $result
}


update_file(){
    trace "update_file got: file: $1 | msg: $2 | $3"
    local file="$1"
    local msg="$2"

    cat $file > /tmp/1.txt 
    echo "$msg" > $file
    cat /tmp/1.txt >> $file
}

xterm1(){
    trace "DEBUG : $DEBUG"
    trace "xterm1() got: 1:$1 2:$2 3:$3 4:$4"
    local prog="/usr/bin/xterm"

    local cmd="$1"
    #`echo $1`
    local msg="$2"
    #`echo $2`

    local arg3="$3"
    local arg4="$4"
    local func='gxmessage'
    local run1="$func hi"
    trace "cmd,msg: $cmd $msg"
    if [ "$DEBUG" = true ];then
    trace 'run here'
    sleep1 3
        #$cmd "$msg" "$arg3" "$arg4"

( $cmd "$msg" "$arg3" "$arg4" &) 
else
trace 'run there'
sleep1 3
#( exec $prog -e $cmd "$msg" "$arg3" "$arg4" &) 

` exec $prog -e $cmd "$msg" "$arg3" "$arg4" ` & 
#( $cmd "$msg" "$arg3" "$arg4" &) 

sleep1 10
        trace 'xterm run in other window'

    fi
}

eacher(){
    trace "eacher() got: 1: $1     2: $2"

    local command="$1"
    local question="$2"
    local waiting="$3"

    local title="$4"
    local result=0
        #answer=
        $(messageYN1 "$question" "$title")
        answer=$?
        #yellow "$answer"
        if [[ $answer -eq 1 ]];then
            #echo 'exec command'
            eval "$command" 
            if [ "$waiting" != '' ];then
                sleep1 "$waiting"
            fi
            result=1
        fi
    return $result
}


messageYN1() {

    trace "messageYN got: 1: $1 2: $2"

    local iconify="$3"

    local str="$1"
    local title=${2:-'y/n question'}   # Defaults to /tmp dir.
    local result=0
    #local msg
    #echo "title: $title"
    #exiting
    if [ "$GUI" = 'true' ];then
    if [ "$iconify" = true ];then
        $( gxmessage -buttons 'back:0,Next!:1' -title "$title" "$str"  $GXMESSAGET -iconic )
else
        $( gxmessage -buttons 'back:0,Next!:1' -title "$title" "$str"  $GXMESSAGET  )
    fi

        result=$?
        #echo  "$result" 
        #echo "result is: $result"
    else
        #echo "a error message" >&2
        trace  "$title: $str"
        read result
        if [ "$result" = 'y' ];then
            let "result = 1"
        else
            let "result = 0"
        fi
    fi
    return $result
}



sleep1()
{
    local sec="$1"

    trace "sleep ${sec}s"

    for (( c=1; c<=$sec; c++ ))
    do
        tracen  "$c "
        sleep 1s
    done


}
red() {
    echo "${LRED}$1"
    tput sgr0
}
trace(){
    if [ "$VERBOSE" = true ];then
        echo "verbose: $1" >&2
    fi
}
tracen(){
    if [ "$VERBOSE" = true ];then
        echo -n "$1" >&2
    fi
}
exiting()
{
    trace "exiting() got: 0:$0 1: $1 , 2: $2"
  
    notify-send 'Exiting'
    if [ "$VERBOSE" = true ];then
        #Backtrace1
        echo 'backtrace'
    fi


    exit
}

do_mini(){
    trace "do_mini() got: $1"
    local route="$1"
    echo $route

    local msg=`cat $file_data | shyaml get-values routes.$route.steps`
    gxmessage "$msg" $GXMESSAGET
}

do_exit(){
    echo 'do_exit'
}
do_action(){
    route="$1"

    local link=`cat $file_data | shyaml get-values routes.$route.url`
    exo-open $link
}

do_edit(){
    gedit $CFG_DIR/blank.yaml
}


do_update(){

    $tasks_sh show_file $CFG_DIR/blank.yaml
    #gedit $CFG_DIR/blank.yaml
}

do_done(){
    #gedit 
    $tasks_sh show_file $CFG_DIR/blank.yaml
}


do_again(){
trace ''
}

do_breath(){
    flite 'take a breath my love' 

    local should=`cat $CFG_DIR/blank.yaml | shyaml get-value frame.url`
    echo0 "$should"
}

do_commitment(){
    trace "do_commitment() got $1"
    $tasks_sh reminder
}
do_next(){
    trace 'do_next'
}
do_breath(){
    echo 'do_breath'

    $tasks_sh recent breath 
}
do_suspend(){
    echo 'do_suspend'

    $tasks_sh suspend1 
}

tracex(){

    local btn_str="${3:-ok}"
    local title="$2"
    local msg="$1"
    gxmessage $GXMESSAGET "$msg" -title "$title" -buttons "$btn_str":0
}
remove_trailing(){
    trace 'remove_trailing'
    echo "$1" | sed -e 's/^ *//g' -e 's/ *$//g'


    #http://stackoverflow.com/questions/369758/how-to-trim-whitespace-from-bash-variable
}

spell2(){
    local str="$1"
    local res=`echo "$str" |  aspell -a | grep  ','`
    if [  "$res" = '' ];then
        echo "$str"
    else
        trace "$res"
        echo "error"
    fi
}
help1(){
    trace "options: "
trace "$1"
}
error_handler(){
    local msg='found error'
    trace "$msg"
    #Backtrace1
    exit 1
}

function Backtrace1 
{
    local _start_from_=0

    local params=( "$@" )
    if (( "${#params[@]}" >= "1" ))
    then
        _start_from_="$1"
    fi

    local i=0
    local first=false
    while caller $i > /dev/null
    do
        if test -n "$_start_from_" && (( "$i" + 1   >= "$_start_from_" ))
        then
            if test "$first" == false
            then
                trace "BACKTRACE IS:"
                first=true
            fi
            caller $i
        fi
        let "i=i+1"
    done
    trace '_+_+_+_+_+'
}

function error() {
JOB="$0"              # job name
LASTLINE="$1"         # line of error occurrence
LASTERR="$2"          # error code
echo "ERROR in ${JOB} : line ${LASTLINE} with exit code ${LASTERR}"
#Backtrace1
exit 1
}

#trap 'error ${LINENO} ${$?}' ERR
trap error_handler ERR                                                           # ! ! ! TRAP ERR ! ! !

trap "eval exiting ${LINENO} ${$?}" SIGINT SIGTERM
#source $PWD/public/cfg/tmp/lib.trap.sh


#dir
export PROJECT_DIR=~/.magnify_the_small/prespective
export PUBLIC_DIR=$PROJECT_DIR/public
export PRIVATE_DIR=$PROJECT_DIR/private
export TODAY_DIR=$PROJECT_DIR/today
export CFG_DIR=$PUBLIC_DIR/cfg
export file_data=$CFG_DIR/blank.yaml
export PLUGINS_DIR=$PUBLIC_DIR/plugins
#sh

export tasks_sh="$PUBLIC_DIR/tasks.sh"
export file_report="$CFG_DIR/report.txt"

#files

export dir_html=/TORRENTS/html
export dir_txt=/TORRENTS/txt
export dir_mp3=/TORRENTS/mp3

export -f xterm1
export -f eacher
#export blank_txt=/tmp/blank.txt
#export readme_md=$PROJECT_DIR/README.md
#export missions_txt=/tmp/missions.txt
#export schedule_txt=/tmp/gcalcli_agenda_full.txt
#export mind_map_png=/tmp/mm.png
#relative dirs
##export WORKFLOWS_DIR=$CFG_DIR/workflows
##export STORY_DIR=$PUBLIC_DIR/story
##export STATIC_DIR=$PUBLIC_DIR/story/static
##export TASKS_DIR=$PUBLIC_DIR/tasks 
##export MENUS_DIR=$PUBLIC_DIR/menus
##export KOANS_DIR=$PUBLIC_DIR/koans
##export SCREENS_DIR=$PUBLIC_DIR/screens

#
export -f trace
#
export -f tracex
##export -f do_mini 
##export -f get_array 
##export -f array_to_buttons

##export -f scrap_something
#export -f messageYN1
#export -f messageFYN1
#export -f edit_stuff
#
export -f update_file 
#export -f reminder 
#export -f debug
#export -f help1 
#export -f echo3 
export -f messageYN1

export -f echo0 
export -f echo01 
#export -f echo2 
export -f exiting


export -f sleep1
export -f remove_trailing 
export -f tracen 
#export -f green
#export -f red 
#export -f blue
#export -f yellow
#export -f Backtrace1
export -f is_valid 
#export -f spell1 
#export -f pids3 
#
#
#export -f pids1 
#
#export -f gedit 
export -f xterm1

trace "DEBUG: $DEBUG"
