#configuration file
#user.cfg

######################env - important ##########################

#export DEBUG=true
export MUTE=true
export motivation_sleeping=10
export TIME_STR='0:10 =0:25 -5'
export TIMEOUT_NS='-t 20000'
export REPORT=false
export DEBUG=false
#export DEBUG=true
export VERBOSE=false
export GXMESSAGET=' -ontop -sticky -timeout 20'
export SHOW_BUTTONS=true
################################  language stuff####################
arr1=( IT AR HI RU )
#arr2=( )
export itR=1
export tlR=1
export enR=1
export ruR=1
export arR=2
export hiR=3
#dir_essay=~/tmp/timer2/essays
##################################  global vars##################

export date1="$(date +%H:%M)"
export PLAYING_ON=false
export LANG_DEFAULT='ar' #ru
#export LANG_ESSAY=ru
export color_arr1=( blue green red black )
export GUI='true'
#audio
export SILENT_FETCH=false
export SILENT=false
export SILENCE=false
export TRANSLATE=true
#timing
export TIMEOUT1=20
export TIMEOUT_LET_ME_SLEEP=60
#export LESSON=14

export SLEEP=30
#export GXMESSAGE1=echo  -ontop -sticky -timeout 10 -buttons \'last task is: "$last_task"\' "message1"

GXMESSAGE0='-wrap -ontop -sticky -timeout 60'
#GXMESSAGE1="-nofocus -wrap -ontop -sticky -timeout 20"
#GXMESSAGE0="-nofocus -wrap -ontop -sticky"
#export ICONIC='' 
export ICONIC='-iconic'
export SLEEPS=15
export SUSPEND=true

export INPUT_THANKS=true
export itR=1
export tlR=1
export enR=1
export ruR=1
export arR=2
export hiR=3

xterm(){
tracex 'xterm command not allowed'
}
echo0(){
 if [ $DEBUG = false ];then
     $PLUGINS_DIR/translation.sh sentence "$1" true  
 else
    trace 'echo0: silent'
 fi
}
echo01(){

 if [ $DEBUG = false ];then
     $PLUGINS_DIR/translation.sh sentence "$1" false 
 else
    trace 'echo0: silent'
 fi


}
debug(){
trace "$2"
}


suspension(){
    dbus-send --system --print-reply     --dest="org.freedesktop.UPower"     /org/freedesktop/UPower     org.freedesktop.UPower.Suspend
}

is_valid(){
    trace  "is_valid() got:"
    trace "1:$1 2:$2"

    if [ "$1" = '' ];then
        trace 'no arg given'
        error_handler
    fi

    local file=$1
    local result=0
    debug yellow 'check existance'
    if [ $file ];then
        debug green 'file exist'
        if  [ -s $file ];then
            debug green 'file has content'
            actualsize=$(du -b "$file" | cut -f 1)
            trace 'size: '
            debug trace $actualsize

            if [ $actualsize -eq 0 ];then
                debug red  'file is corrupted'
                #let "result = 1"
            else
                debug green 'file seems ok'
                let "result = 1"
            fi
        else
            debug red 'file is empty'
        fi
    else
        debug red 'file not exist'
    fi
    return $result
}


update_file(){
    trace "update_file got: file: $1 | msg: $2 | $3"
    local file="$1"
    local msg="$2"

    cat $file > /tmp/1.txt 
    echo "$msg" > $file
    cat /tmp/1.txt >> $file
}

xterm1(){
    trace "DEBUG : $DEBUG"
    trace "xterm1() got: 1:$1 2:$2 3:$3 4:$4"
    local prog="/usr/bin/xterm"

    local cmd="$1"
    #`echo $1`
    local msg="$2"
    #`echo $2`

    local arg3="$3"
    local arg4="$4"
    local func='gxmessage'
    local run1="$func hi"
    trace "cmd,msg: $cmd $msg"
#    if [ "$DEBUG" = true ];then
#    tracex 'debug: true'
#    sleep1 3
#        #$cmd "$msg" "$arg3" "$arg4"
#
#( $cmd "$msg" "$arg3" "$arg4" &) 
#else
#
#    tracex 'debug: false'
#trace 'run there'
#sleep1 3
##( exec $prog -e $cmd "$msg" "$arg3" "$arg4" &) 
#
#
##( $cmd "$msg" "$arg3" "$arg4" &) 
#
#sleep1 10
#        trace 'xterm run in other window'
#
#    fi
#
` $prog -e $cmd "$msg" "$arg3" "$arg4"  `
trace 'xterm exiting'
}

eacher(){
    trace "eacher() got: 1: $1     2: $2"

    local command="$1"
    local question="$2"
    local waiting="$3"

    local title="$4"
    local result=0
        #answer=
        $(messageYN1 "$question" "$title")
        answer=$?
        #yellow "$answer"
        if [[ $answer -eq 1 ]];then
            #echo 'exec command'
            eval "$command" 
            if [ "$waiting" != '' ];then
                sleep1 "$waiting"
            fi
            result=1
        fi
    return $result
}


messageYN1() {

    trace "messageYN got: 1: $1 2: $2 3:$3"

    local iconic="$3"

    local str="$1"
    local title=${2:-'y/n question'}   # Defaults to /tmp dir.
    local result=0
  
           $( gxmessage -buttons 'back:0,Next!:1' -title "$title" "$str"  $GXMESSAGET "$iconic"  )

        result=$?

    return $result
}



sleep1()
{
    local sec="$1"

    trace "sleep ${sec}s"

    for (( c=1; c<=$sec; c++ ))
    do
        #tracen  "$c "
        #echo ''
        sleep 1s
    done


}
red() {
    echo "${LRED}$1"
    tput sgr0
}
trace(){

    if [ "$VERBOSE" = false ];then
        echo "_: $1 : $2 :$3" >&2
    fi
}
tracen(){
    #if [ "$VERBOSE" = true ];then

        #echo -n "$1 :" >&2
        echo  "$1 :" >&2
    #fi
}
exiting()
{
    trace "exiting() got: 0:$0 1: $1 , 2: $2"
  
    notify-send 'Exiting'
    #if [ "$VERBOSE" = true ];then
        Backtrace1
        trace 'backtrace'
    #fi
    flite exiting
trace 'exiting'
    exit
}

do_mini(){
    trace "do_mini() got: $1"
    local route="$1"
    trace $route

    local msg=`cat $file_data | shyaml get-values routes.$route.steps`
    gxmessage "$msg" $GXMESSAGET
}

do_exit(){
    echo 'do_exit'
}
do_action(){
    route="$1"

    local link=`cat $file_data | shyaml get-values routes.$route.url`
    exo-open $link
}

do_edit(){
    gedit $CFG_DIR/blank.yaml
}


do_update(){

    $tasks_sh show_file $CFG_DIR/blank.yaml
    #gedit $CFG_DIR/blank.yaml
}

do_done(){
    #gedit 
    $tasks_sh show_file $CFG_DIR/blank.yaml
}


do_again(){
trace ''
}

do_breath(){
    flite 'take a breath my love' 

    local should=`cat $CFG_DIR/blank.yaml | shyaml get-value frame.url`
    echo0 "$should"
}

do_commitment(){
    trace "do_commitment() got $1"
    $tasks_sh reminder
}
do_next(){
    trace 'do_next'
}
do_breath(){
    echo 'do_breath'

    $tasks_sh recent breath 
}
do_suspend(){
    echo 'do_suspend'

    $tasks_sh suspend1 
}

tracex(){

    local btn_str="${3:-ok}"
    local title="$1"
    local msg="$2"

    gxmessage $GXMESSAGET "$msg" -title "$title" -buttons "$btn_str":0 $ICONIC

    flite "$1"
}
remove_trailing(){
    trace 'remove_trailing'
    echo "$1" | sed -e 's/^ *//g' -e 's/ *$//g'


    #http://stackoverflow.com/questions/369758/how-to-trim-whitespace-from-bash-variable
}

spell2(){
    local str="$1"
    local res=`echo "$str" |  aspell -a | grep  ','`
    if [  "$res" = '' ];then
        echo "$str"
    else
        trace "$res"
        notify-send "$res"
        echo "error"
    fi
}
help1(){
    trace "options: "
trace "$1"
}
error_handler(){
flite 'error handler'
    local msg='found error'
    trace "$msg"
    Backtrace1
    exit 1
}

function Backtrace1 
{
flite 'back - trace'
    local _start_from_=0

    local params=( "$@" )
    if (( "${#params[@]}" >= "1" ))
    then
        _start_from_="$1"
    fi

    local i=0
    local first=false
    while caller $i > /dev/null
    do
        if test -n "$_start_from_" && (( "$i" + 1   >= "$_start_from_" ))
        then
            if test "$first" == false
            then
                trace "BACKTRACE IS:"
                first=true
            fi
            caller $i
        fi
        let "i=i+1"
    done
    flite 'sleep 10 seconds'
    sleep1 10
    trace '_+_+_+_+_+'
}
string_ws(){
local str="$1"


local str_ws=$(echo "$str"|sed 's/ /_/g');
echo "$str_ws"

}
random_quote_before(){
        $tasks_sh motivation short 

}
random_quote_after(){
        $tasks_sh motivation guidance 
}

fetching1(){
    local msg=$( cat $file_data | shyaml get-value "$1" )
    echo "$msg"
   }

commander(){
local cmd="$1"
local results="$cmd"
if [ "$DEBUG" = 'true' ];then
results=$(gxmessage -entrytext "$cmd" 'show command:' -title "commander:" $GXMESSAGET)
fi

local results1=`eval "$results"`

if [ "$DEBUG" = 'true' ];then
local silence=$(gxmessage "$results1" $GXMESSAGET -title 'results')
fi

echo "$results1"
}
fetching2(){

local cmd=$( echo "cat $file_data | shyaml $1" )
#commander "$cmd"
 local msg1=`eval "$cmd"`
 #` cat $file_data | shyaml "$1" `
    #trace "msg1: $msg1" 'message'

    echo "$msg1"

}

fetching(){
local ans=$( fetching1 "$1" )

trace "ans: $ans"
local ans2=` fetching2 "$ans" `

    #tracex "$ans2" 'fetching 2' 
trace "ans1: $ans1"
echo "$ans2"

#trace "ans2: $ans2"
}

function error() {
JOB="$0"              # job name
LASTLINE="$1"         # line of error occurrence
LASTERR="$2"          # error code
echo "ERROR in ${JOB} : line ${LASTLINE} with exit code ${LASTERR}"
#Backtrace1
exit 1
}
parse_subject(){
local subject="$1"
#local file_to="$2"
local cmd=$( echo "cat $file_data | shyaml get-values $subject" )
results=$(commander "$cmd")
echo "$results"
#results=$(eval $cmd)
#echo "$results" > $file_to


}


flite(){
    trace "flite() got: 1:$1 2:$2"
    local must="$2"
    sleep1 1

    if [  "$must" = 'true' ] || [ "$SILENCE" = false ];then
        local cmd=/usr/bin/flite
        local desc="$1"
        notify-send "say:" "$desc"
        ( echo "$desc" | $cmd &)
        #gxmessage "flite: $desc" $GXMESSAGET
    else
        echo 'flite is muted'
    fi


}
#trap 'error ${LINENO} ${$?}' ERR
trap error_handler ERR                                                           # ! ! ! TRAP ERR ! ! !

trap "eval exiting ${LINENO} ${$?}" SIGINT SIGTERM
#source $PWD/public/cfg/tmp/lib.trap.sh


#dir
export PROJECT_DIR=~/.magnify_the_small/prespective
export PUBLIC_DIR=$PROJECT_DIR/public
export PRIVATE_DIR=/tmp
export TODAY_DIR=/tmp
export CFG_DIR=$PUBLIC_DIR/cfg
export file_data=$CFG_DIR/blank.yaml
export PLUGINS_DIR=$PUBLIC_DIR/plugins
#sh

export SCRIPTS_DIR=$PROJECT_DIR/scripts
export tasks_sh=$PUBLIC_DIR/tasks.sh
export file_report=$CFG_DIR/report.yaml
export file_log=$CFG_DIR/log.yaml
export file_workflow=$CFG_DIR/workflow.cfg
#files

export dir_html=/TORRENTS/html
export dir_txt=/TORRENTS/txt
export dir_mp3=/TORRENTS/mp3

export -f xterm1
export -f eacher
#export blank_txt=/tmp/blank.txt
#export readme_md=$PROJECT_DIR/README.md
#export missions_txt=/tmp/missions.txt
#export schedule_txt=/tmp/gcalcli_agenda_full.txt
#export mind_map_png=/tmp/mm.png
#relative dirs
##export WORKFLOWS_DIR=$CFG_DIR/workflows
##export STORY_DIR=$PUBLIC_DIR/story
##export STATIC_DIR=$PUBLIC_DIR/story/static
##export TASKS_DIR=$PUBLIC_DIR/tasks 
##export MENUS_DIR=$PUBLIC_DIR/menus
##export KOANS_DIR=$PUBLIC_DIR/koans
##export SCREENS_DIR=$PUBLIC_DIR/screens

#
export -f trace
#
export -f tracex
##export -f do_mini 
##export -f get_array 
##export -f array_to_buttons

##export -f scrap_something
#export -f messageYN1
#export -f messageFYN1
#export -f edit_stuff
#
export -f update_file 
#export -f reminder 
export -f debug
#export -f help1 
#export -f echo3 
export -f messageYN1

export -f echo0 
export -f echo01 
#export -f echo2 
export -f exiting


#parsing from yaml
export -f parse_subject 
export -f fetching1 
export -f fetching2
export -f fetching
export -f sleep1

export -f remove_trailing 

export -f tracen 
export -f trace 
#export -f green
#export -f red 
#export -f blue
#export -f yellow

export -f Backtrace1

export -f is_valid 
export -f spell2 
#export -f pids3 
export -f error_handler
#
#
#export -f pids1 
#
#export -f gedit 

export -f flite 

export -f string_ws 
export -f xterm1

tracen "DEBUG: $DEBUG"
tracen "VERBOSE: $VERBOSE"

