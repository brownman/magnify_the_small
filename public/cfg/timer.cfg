#!/bin/bash
################################### links


export INSTALL='false'
export PROFIT='true'
export VERBOSE='false'
###
export TIMEOUT_NS='-t 10000'

#########url links
export url_blog="http://thoughts-about-something.blogspot.co.il"
export url_calendar="https://www.google.com/calendar/render?tab=mc"
export url_tasks="https://mail.google.com/tasks/ig?pli=1"
export mm_link='http://drichard.org/mindmaps/'



#absolute path
export ABSOLUTE_DIR=~/.magnify_the_small

#private reports | blogging
export private_txt=/tmp/private.txt 
export dir_txt=~/tmp/bash_koans/txt
export dir_mp3=/tmp
export blank_txt=/tmp/blank.txt

export readme_md=$ABSOLUTE_DIR/README.md
export missions_txt=/tmp/missions.txt
export schedule_txt=/tmp/gcalcli_agenda_full.txt

export mind_map_png=/tmp/mm.png
#relative dirs
export PUBLIC_DIR=$ABSOLUTE_DIR/public
export PRIVATE_DIR=$ABSOLUTE_DIR/private
##
export CFG_DIR=$PUBLIC_DIR/cfg
#tmp
export TMP_DIR=$PUBLIC_DIR/tmp
export REPORT_DIR=$TMP_DIR/report
export MORNING_DIR=$TMP_DIR/morning
export TESTS_DIR=$TMP_DIR/tests


export STORY_DIR=$PUBLIC_DIR/story
export TASKS_DIR=$PUBLIC_DIR/tasks 
export MENUS_DIR=$PUBLIC_DIR/menus
export KOANS_DIR=$PUBLIC_DIR/koans
export SCREENS_DIR=$PUBLIC_DIR/screens

####### .sh
export tasks_sh="$PUBLIC_DIR/tasks.sh"
#export tpng="$TASKS_DIR/txt_to_png.sh"
################################  language stuff####################
arr1=( IT AR HI RU )
#arr2=( )
    export itR=1
    export tlR=1
    export enR=1
    export ruR=1
    export arR=2
    export hiR=3
#dir_essay=~/tmp/timer2/essays
##################################  global vars##################


#export series1="glossary,input_task,motivation_start,mindmap, edit,input_task,sleep,time,sleep,suspend,rules"
    export NAME1='Ofer'

    date1="$(date +%H:%M)"
    export PLAYING_ON=false
    export LANG_ESSAY=ru

export color_arr1=( blue green red black )
    export GUI='true'
    export SILENT_FETCH=false
    export SILENT=false
    export TIMEOUT1=20
    export LESSON=14
    export TRANSLATE=true
    export SLEEP=30
#export GXMESSAGE1=echo  -ontop -sticky -timeout 10 -buttons \'last task is: "$last_task"\' "message1"

    GXMESSAGET="-wrap -ontop -sticky -timeout 20"
#GXMESSAGE1="-nofocus -wrap -ontop -sticky -timeout 20"
#GXMESSAGE0="-nofocus -wrap -ontop -sticky"
#export ICONIC='' 
    export ICONIC='-iconic'
    export SLEEPS=15
    export SUSPEND=true
    export SILENCE=false
    export INPUT_THANKS=true
################################################   messages
    last_task="do for other first"
    msg_remind_me="write an automation for this task"
    msg_others="do for other first and have a blessing on your head"
    msg_suspend='do sport for 5 seconds'
    msg_m0='I am writing short essay in many languages'
    msg_m1='sign one circle on the wall' 
    msg_m3='please update list' 
    msg_m2='excellent' 
    msg_m4='good'
    msg_m6='write the impossible - the hardest thing for you' 
    msg_m7='update your notebook please positively' 
    msg_m8='you know what is right and what to do now' 
#how easier can it realy be ?"
    last_thanks="you can do it - it is so easy"
    last_essay="essay step"
#timer2 - one step for man - one step for"
    last_suspend="well - I am tired - i am going to sleep now - thanks for the fish" 
    last_bash="linux programming start here"
#well - I am tired - i am going to leep2 now - thanks for the fish" 
    last_camera_before="" #say cheese little mouse" 
    last_camera_after="take a picture of your notebook please" 
#this is much better" 
    export itR=1
    export tlR=1
    export enR=1
    export ruR=1
    export arR=2
    export hiR=3
############################ colors
    RESTORE='\033[0m'

    RED='\033[00;31m'
    GREEN='\033[00;32m'
    YELLOW='\033[00;33m'
    BLUE='\033[00;34m'
    PURPLE='\033[00;35m'
    CYAN='\033[00;36m'
    LIGHTGRAY='\033[00;37m'

    LRED='\033[01;31m'
    LGREEN='\033[01;32m'
    LYELLOW='\033[01;33m'
    LBLUE='\033[01;34m'
    LPURPLE='\033[01;35m'
    LCYAN='\033[01;36m'
    WHITE='\033[01;37m'


#dir




#story
    export philo_txt=$STORY_DIR/philo.txt
    export police_txt=$STORY_DIR/police.txt
    export quotes_txt=$STORY_DIR/quotes.txt
    export earth_txt=$STORY_DIR/earth.txt
    export magician=$STORY_DIR/magician.txt

#############  .bashrc related
    alias duh="du -h -d 0 [^.]*"

    spell1(){
        aspell -a <<< "$1"
    }

######################################## functions !!!!!!!!!!!!!!!
cyan() {
    echo -e "${LCYAN}$1"
        tput sgr0
#fi
}
white() {
    echo -e "${WHITE}$1"
        tput sgr0
}
green() {
    echo -e "${LGREEN}$1"
        tput sgr0
}

red() {
    echo -e "${LRED}$1"
        tput sgr0
}
yellow() {
    echo -e "${LYELLOW}$1"
        tput sgr0
}
blue() {
    echo -e "${LBLUE}$1"
        tput sgr0
}
echo2(){
    if [ "$VERBOSE" = true ];then

        red "$1"
            fi

}
random1()
{
    local num="$1"
        let "r = $RANDOM % $num"
#green "r = $r"
#counter=$r
#let "reminder = $counter % 4"
#echo1 "the reminder is: $reminder"
        return $r
}
rainbow(){

    random1 4
        local num=$?
#red "num: $num"
        color0="${color_arr1[$num]}"


}
echo4(){

    sleep1 3
        if [ "$1" = '' ];then
#exiting
            return
                fi

                local lang1=$LANG
                echo2 "lang1: $lang1"
                if [ "$lang1" = '' ];then
                    random1 4
                        local num=$?
#red "num: $num"
                        lang0="${arr1[$num]}"
                        lang1=$(lower $lang0)
                        fi



#red "lang: $lang1"
#echo "playing is on? $PLAYING_ON"
                        local str="$1"
                        yellow "$str"
                        $tasks_sh  translate_f  "$str" "$lang1"

}
echo5(){

    sleep1 3
        if [ "$1" = '' ];then
#exiting
            return
                fi
#count words in sentence - if lower then 4 - translate_f also to: ar, hi
                num=`echo "$1" | wc -w`
                str="$1"
                if [ "str" = '' ];then
                    exiting
                else



                    $tasks_sh  translate_f  "$str" en 
#echo "$str" | flite
                        sleep1 2
                        $tasks_sh  translate_f  "$str" it 
                        sleep1 2
                        $tasks_sh  translate_f  "$str" ru 
                        if [ $num -lt 4 ];then
                            sleep1 2
                                $tasks_sh  translate_f  "$str" hi 
                                sleep1 2
                                $tasks_sh  translate_f  "$str" ar 
                                sleep1 2
                                $tasks_sh  translate_f  "$str" tl 
                                fi

                                fi
}


echo3(){
#caller 0
#red "$1"

    echo -n "_"
}

echo1(){


    echo -n "."
#red "$2"

#green ""
#$1"

#caller 0


}

messageANS() {

    local title="$1"
        local file="$2"
#local result=
        result=$( gxmessage -center  -nofocus       -title "$title" -file $file -timeout 15 -entry )

        if [ "$result" != '' ];then
            cat $rules_txt > /tmp/rules
                echo "$result" > $rules_txt
                cat /tmp/rules >> $rules_txt
                fi


}
messageFYN() {

    local title="$1"
        local file="$2"
#local result=

        result=$( gxmessage  -buttons "No":1,"Yes":2       -title "$title" -file $file $GXMESSAGET )
        echo "$?"
        return "$?"
}
messageYN() {

    local title="$1"
        local str="$2"
#local result=''

        if [ "$GUI" = 'true' ];then
            result=$( gxmessage -buttons "No":1,"Yes":2          -title "$title" "$str"  $GXMESSAGET )
        else
            green "$str"
                read result
                if [ $result = 'y' ];then
                    result=2
                        let "result = 2"
                else
                    let "result = 1"
                        fi
#echo $result
                        fi
                        echo "$?"
#return "$?"
                        return $result
}
Backtrace1 () {

    if [ "$VERBOSE" = true ];then
        echo "Backtrace is:"
            i=0
            while caller $i
                do
                    i=$((i+1))
                        done

                        fi
}
exiting()
{
    local file=$STORY_DIR/exit.txt
        Backtrace1
        red 'exiting!!'
        echo 'exiting' | flite
        choose4 $file
        exit 0
}
sleep1()
{
    local sec="$1"
        blue   '..'
#sleep $sec"
        sleep ${sec}s
}

log1()
{
    str8=`echo "\t\t\t\tWORKFLOW";echo $workflow`
        str7=`echo "\t\t\t\tSPORT";cat  "$sport_txt" | head -2`
        str3=`cat  "$todo_txt" | head -2`
        str6=$( date | awk -F ' ' '{print $4}' )
        str5=`cat  "$timing_txt"  | head -3`
        str4=`cat  "$done_txt" | head -2` #points
        str1=""
        str2=$( white "\t\t\t\t\t\t\t$str6";  yellow "$str4"; green "$str3"; red "$str5";red "$str7";cyan "$str8" )
        echo "$str2"
}
log2(){

    str9=`cat  "$glossary_txt"  | head -3`
        str8=`cat  "$product_txt"  | head -3`
        str7=`cat  "$motivations_txt" | head -3 `

        str2=$( cyan "$str7"; white "$str8" ;green "$str9" )

        echo "$str2"
}



log3(){
    str=`cat  "$commitment_txt"`
        str2=$( white "$str"; )
        echo "$str2"

}




##########################################tts engine
#http://www.thegeekstuff.com/2010/03/espeak-speech-synthesizer-for-ubuntu/

##########################################vim:
#:set filetype=sh #for identation, patern matching
#:set syntax=sh
#,ic - comment multiple lines

####################################local tts engines:
#echo 'Вы можете играть с ним ?' | espeak -v ru -s 14
#echo "russian words" | festival --tts --language russian

############## commands to remember:
#1.mpack,2.sendmail /etc/ssmtp/ssmtp.conf -> update password


update_lang(){
    export LANG=$1
        red "update translated language to: $LANG"
}
export LANG=''
god(){
    white "$1"
}
robot(){
    cyan "robot:"
        white "$1"
}
me(){
    green "$1"
}
update_file(){
    echo "update_file got: file: $1 | msg: $2 | $3"
        local file="$1"
        local msg="$2"
#`echo $2`
        if [ "$msg" != '' ];then
            if [  "$PROFIT" = true ];then
                echo5 "$msg"
                    fi
                    cat $file > /tmp/1.txt 
                    echo "$msg" > $file
                    cat /tmp/1.txt >> $file
                    fi
}

pids1(){
    echo "pids() got: $1"
        PIDS=$(pidof bash $1)  # Process IDs of the various instances of this script.
        P_array=( $PIDS )    # Put them in an array (why?).
        echo "$PIDS"           # Show process IDs of parent and child processes.
        let "instances = ${#P_array[*]} - 1"  # Count elements, less 1.
# Why subtract 1?
        echo "$instances instance(s) of this script running."


        if [ $instances -gt 2 ];then
#exiting
            red 'u may like to kill some..'
                fi
}

random_quote1(){
    file="$1"
        max=`cat -b $file | wc -l`
        random1 $max
        num=$?
        str=`cat $file | head -$num | tail -1`
        echo5 "$str" 

}
lower() { echo ${@,,}; }

choose4(){
    local file="$1"
        max=`cat -b $file | wc -l`
        random1 $max
        num=$?
        str=`cat $file | head -$num | tail -1`
        echo4 "$str" 
}

choose5(){
    local file="$1"
        max=`cat -b $file | wc -l`
        random1 $max
        num=$?
        str=`cat $file | head -$num | tail -1`
        echo5 "$str" 
}

add_line(){
    echo2 "input line got: file:$1 title:$2 3:$3"
#latest modifications: 
#pass reference by supplying name of global variable.
        local file=$1
        local title="$2"
        local when="$3"
        answer=$( gxmessage  -title "$title" -file  "$file" -ontop -timeout 10 -entry )
        if [ "$answer" = exit ]
            then
                exiting
                fi
                if [ $TRANSLATE = true ]
                    then
                        str=`cat $file | head -1`
#echo4 "$answer" 
                        fi

                        if [ "$when" = 'true' ];then
                            date1="$(date +%H:%M)"
                                str="$date1 - $answer"
                        else
                            str="$answer"
                                fi

                                update_file $file "$str"
}

split1(){
    echo '' > /tmp/glossary.txt
        echo2 'split()'
        local file=$1
#cat $file
        old_IFS=$IFS
        IFS=$' · '
        lines=($(cat $file)) # array
        IFS=$old_IFS
#register signals
        for line in "${lines[@]}"
            do
                if [ "$line" != '' ]
                    then
                        echo  "$line" >> /tmp/glossary.txt
                        fi
                        done
                        cat  /tmp/glossary.txt 
                        ls -l $file
}

eacher(){
    echo2  "eacher() got: 1: $1     2: $2"
        question="$2"
        command="$1"
        answer=$( messageYN "y/n question" "$question" )
        if [ "$answer" = 2 ];then
            echo 'exec command'
                ( eval "$command" &)
                fi

}

trap "eval exiting" SIGINT SIGTERM

trap "red 'found error'" ERR                                                           # ! ! ! TRAP ERR ! ! !

export -f eacher 
export -f split1
export -f random_quote1
export -f update_lang 
export -f update_file
export -f god 
export -f robot 
export -f me 

export -f echo1 
export -f echo3 
export -f echo2 

export -f exiting
export -f log1 
export -f sleep1
export -f messageYN 


export -f green
export -f red 
export -f blue
export -f yellow
export -f Backtrace1

#latest
export -f choose4 
export -f choose5 
export -f add_line 
export -f pids1 

#installation
export motivations_txt="$STORY_DIR/motivations.txt"
#
export done_txt=$REPORT_DIR/done.txt
export ideas_txt=$REPORT_DIR/ideas.txt
export now_txt=$REPORT_DIR/now.txt
export scrap_txt=$REPORT_DIR/scrap.txt

if [ "$INSTALL" = true ];then
touch $ideas_txt
touch $done_txt
touch $now_txt
touch $scrap_txt
#mkdir -p ~/tmp/bash_koans/txt
fi

